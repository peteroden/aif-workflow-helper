name: 'Release Workflow'
description: 'Unified release workflow logic for both production and test releases'

inputs:
  is_test:
    description: 'Whether this is a test release'
    required: false
    default: 'false'
  version_bump:
    description: 'Version bump type (patch, minor, major)'
    required: true
  github_token:
    description: 'GitHub token for release creation'
    required: true
  pypi_token:
    description: 'PyPI or TestPyPI API token'
    required: true
  package_name:
    description: 'Package name'
    required: false
    default: 'aif-workflow-helper'

outputs:
  version:
    description: 'The version that was created'
    value: ${{ steps.version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Create version
      id: version
      shell: bash
      run: |
        if [ "${{ inputs.is_test }}" = "true" ]; then
          # Test release: Create temporary dev version
          echo "Creating test version..."
          # Install uv and toml for test version creation
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv pip install --system toml
          
          # Generate dev version with timestamp
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Current version: $CURRENT_VERSION"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TEST_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}"
          echo "Test version: $TEST_VERSION"
          python -c "import toml; d=toml.load('pyproject.toml'); d['project']['version']='${TEST_VERSION}'; toml.dump(d, open('pyproject.toml','w'))"
          echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT
          echo "changelog=Generated from test workflow" >> $GITHUB_OUTPUT
        else
          # Production release: Use manage-version action
          echo "Creating production version..."
          # This requires the manage-version action to be run as a separate step
          # We'll handle this in the calling workflow
          echo "Production version creation handled by calling workflow"
        fi

    # 1. Build the package
    - name: Build package
      uses: ./.github/actions/build-python-package
      with:
        version: ${{ steps.version.outputs.version || steps.prod-version.outputs.new_version }}
        package-name: ${{ inputs.package_name }}

    # 2. Create GitHub release
    - name: Create release
      if: ${{ !cancelled() }}
      uses: ./.github/actions/create-github-release
      with:
        release-tag: ${{ inputs.is_test == 'true' && format('test-v{0}', steps.version.outputs.version) || format('v{0}', steps.prod-version.outputs.new_version) }}
        release-title: ${{ inputs.is_test == 'true' && format('ðŸ§ª Test Release v{0}', steps.version.outputs.version) || format('Release v{0}', steps.prod-version.outputs.new_version) }}
        github-token: ${{ inputs.github_token }}
        package-name: ${{ inputs.package_name }}
        version: ${{ steps.version.outputs.version || steps.prod-version.outputs.new_version }}
        changelog: ${{ steps.version.outputs.changelog || steps.prod-version.outputs.changelog }}
        prerelease: ${{ inputs.is_test }}

    # 3. Publish to PyPI/TestPyPI
    - name: Publish package
      uses: ./.github/actions/publish-python-package
      with:
        version: ${{ steps.version.outputs.version || steps.prod-version.outputs.new_version }}
        repository: ${{ inputs.is_test == 'true' && 'testpypi' || 'pypi' }}
        twine-username: __token__
        twine-password: ${{ inputs.pypi_token }}
        package-name: ${{ inputs.package_name }}
        test-install: 'true'
      continue-on-error: ${{ inputs.is_test == 'true' }}

    - name: Cleanup test changes
      if: always() && inputs.is_test == 'true'
      shell: bash
      run: |
        git checkout pyproject.toml || true