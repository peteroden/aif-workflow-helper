name: 'Unified Version Management'
description: 'Handles both test and production version creation'

inputs:
  version_bump:
    description: 'Version bump type (patch, minor, major)'
    required: true
  is_test:
    description: 'Whether this is a test release'
    required: false
    default: 'false'
  commit_strategy:
    description: 'Git commit strategy for production releases'
    required: false
    default: 'tag_only'

outputs:
  version:
    description: 'The version that was created'
    value: ${{ steps.test-version.outputs.version || steps.prod-version.outputs.new_version }}
  changelog:
    description: 'Changelog content'
    value: ${{ steps.test-version.outputs.changelog || steps.prod-version.outputs.changelog }}

runs:
  using: 'composite'
  steps:
    - name: Create test version (no commit)
      if: inputs.is_test == 'true'
      id: test-version
      shell: bash
      run: |
        # Install uv and supporting tools for test version
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="$HOME/.local/bin:$PATH"
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        uv pip install --system toml
        
        # Generate test version with timestamp
        set -e
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "Current version: $CURRENT_VERSION"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        TEST_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}"
        echo "Test version: $TEST_VERSION"
        python -c "import toml; d=toml.load('pyproject.toml'); d['project']['version']='${TEST_VERSION}'; toml.dump(d, open('pyproject.toml','w'))"
        echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT
        echo "changelog=Generated from test workflow" >> $GITHUB_OUTPUT

    - name: Create production version
      if: inputs.is_test == 'false'
      id: prod-version
      uses: ./.github/actions/manage-version
      with:
        version_bump: ${{ inputs.version_bump }}
        is_test: 'false'
        commit_strategy: ${{ inputs.commit_strategy }}