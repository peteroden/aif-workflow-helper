name: 'Build and Publish Python Package'
description: 'Robust build, validation, and publishing of Python package with comprehensive diagnostics'

inputs:
  version:
    description: 'Package version to build'
    required: true
  repository:
    description: 'PyPI repository (pypi or testpypi)'
    required: true
    default: 'pypi'
  twine-username:
    description: 'Twine username'
    required: true
    default: '__token__'
  twine-password:
    description: 'Twine password/token'
    required: true
  test-install:
    description: 'Whether to test installation from repository after upload'
    required: false
    default: 'true'
  package-name:
    description: 'Package name for installation test'
    required: false
    default: 'aif-workflow-helper'
  create-release:
    description: 'Whether to create a GitHub release'
    required: false
    default: 'false'
  release-tag:
    description: 'Git tag for the release'
    required: false
    default: ''
  release-title:
    description: 'Title for the GitHub release'
    required: false
    default: ''
  release-notes:
    description: 'Additional release notes content (optional - action generates default notes)'
    required: false
    default: ''
  changelog:
    description: 'Changelog content for production releases'
    required: false
    default: ''
  prerelease:
    description: 'Mark release as prerelease'
    required: false
    default: 'false'
  github-token:
    description: 'GitHub token for release creation'
    required: false
    default: ''

outputs:
  wheel-path:
    description: 'Path to built wheel file'
    value: ${{ steps.build.outputs.wheel-path }}
  sdist-path:
    description: 'Path to built source distribution'
    value: ${{ steps.build.outputs.sdist-path }}

runs:
  using: 'composite'
  steps:
    - name: Install uv and supporting tools
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        uv pip install --system toml

    - name: Build package (uv)
      id: build
      shell: bash
      run: |
        uv build
        echo "wheel-path=$(ls dist/*.whl | head -n1)" >> $GITHUB_OUTPUT
        echo "sdist-path=$(ls dist/*.tar.gz | head -n1)" >> $GITHUB_OUTPUT

    - name: Inspect artifacts & validate
      shell: bash
      run: |
        set -e
        echo "--- dist listing ---"
        ls -l dist
        echo "--- twine check ---"
        uvx twine check dist/*
        echo "--- sdist preview ---"
        tar -tzf dist/*.tar.gz | head -40 || true
        echo "--- wheel file name ---"
        WHEEL=$(ls dist/*.whl | head -n1)
        echo "Wheel: $WHEEL"
        echo "--- wheel contents ---"
        python -c "import zipfile,glob; w=glob.glob('dist/*.whl')[0]; z=zipfile.ZipFile(w); print('\\n'.join(z.namelist())); meta=[n for n in z.namelist() if n.endswith('METADATA')]; print('\\n--- METADATA (truncated) ---\\n'+ z.read(meta[0]).decode(errors='replace')[:1500] if meta else 'No METADATA file')"
        echo "--- version validation ---"
        INTENDED='${{ inputs.version }}'
        case "$WHEEL" in *"$INTENDED"*) echo "Version validation passed ($INTENDED)";; *) echo "ERROR: Intended version $INTENDED not found in wheel filename $WHEEL" >&2; exit 1;; esac

    - name: Test local installation (uv)
      shell: bash
      run: |
        uv pip install --system dist/*.whl
        aif-workflow-helper --help | head -n 2
        python -c "import aif_workflow_helper.utils.logging as lg; import aif_workflow_helper.core.upload as up; print('Local imports OK:', lg.logger.name, up.__name__)"

    - name: Publish to repository
      shell: bash
      env:
        TWINE_USERNAME: ${{ inputs.twine-username }}
        TWINE_PASSWORD: ${{ inputs.twine-password }}
      run: |
        set -e
        REPO_FLAG=""
        if [ "${{ inputs.repository }}" = "testpypi" ]; then
          REPO_FLAG="--repository testpypi"
        fi
        
        echo "📦 Uploading to ${{ inputs.repository }}..."
        echo "Package: ${{ inputs.package-name }} version ${{ inputs.version }}"
        echo "Files to upload:"
        ls -la dist/
        
        if uvx twine upload --verbose $REPO_FLAG dist/*; then
          echo "✅ Upload successful to ${{ inputs.repository }}"
          echo "Package ${{ inputs.package-name }}==${{ inputs.version }} should be available shortly"
        else
          echo "❌ Upload failed to ${{ inputs.repository }}"
          echo "This might be due to:"
          echo "- Version already exists"
          echo "- Authentication issues"
          echo "- Network problems"
          exit 1
        fi

    - name: Test installation from repository (isolated)
      if: inputs.test-install == 'true'
      shell: bash
      run: |
        echo "Waiting for package to be available on ${{ inputs.repository }}..."
        sleep 30
        
        python -m venv test_env
        source test_env/bin/activate
        pip install --upgrade pip
        
        # Retry logic for package installation
        RETRY_COUNT=0
        MAX_RETRIES=5
        RETRY_DELAY=30
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Installation attempt $((RETRY_COUNT + 1))/$MAX_RETRIES for ${{ inputs.package-name }}==${{ inputs.version }}"
          
          if [ "${{ inputs.repository }}" = "testpypi" ]; then
            if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ inputs.package-name }}==${{ inputs.version }}; then
              echo "✅ Package installation successful!"
              break
            fi
          else
            if pip install ${{ inputs.package-name }}==${{ inputs.version }}; then
              echo "✅ Package installation successful!"
              break
            fi
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
            echo "⏳ Installation failed, waiting ${RETRY_DELAY}s before retry..."
            sleep $RETRY_DELAY
          else
            echo "❌ Package installation failed after $MAX_RETRIES attempts"
            echo "Available versions on ${{ inputs.repository }}:"
            if [ "${{ inputs.repository }}" = "testpypi" ]; then
              pip index versions --index-url https://test.pypi.org/simple/ ${{ inputs.package-name }} || echo "Could not query available versions"
            else
              pip index versions ${{ inputs.package-name }} || echo "Could not query available versions"
            fi
            exit 1
          fi
        done
        
        # Test the installed package
        echo "Testing CLI functionality..."
        aif-workflow-helper --help | head -n 2
        python -c "import aif_workflow_helper.core.download as d; print('Remote install OK:', d.__name__)"

    - name: Create repository archive
      if: inputs.create-release == 'true'
      shell: bash
      run: |
        # Create a clean archive of the repository without .git directory
        git archive --format=zip --output=${{ inputs.package-name }}-${{ inputs.version }}-source.zip HEAD

    - name: Prepare release artifacts
      if: inputs.create-release == 'true'
      shell: bash
      run: |
        # Create a release directory with all artifacts
        mkdir -p release-artifacts
        cp dist/*.whl release-artifacts/
        cp dist/*.tar.gz release-artifacts/
        cp *.zip release-artifacts/
        echo "--- Release artifacts ---"
        ls -la release-artifacts/

    - name: Validate release inputs
      if: inputs.create-release == 'true'
      shell: bash
      run: |
        if [ -z "${{ inputs.release-tag }}" ] || [ -z "${{ inputs.github-token }}" ]; then
          echo "Error: release-tag and github-token are required when create-release=true"
          exit 1
        fi

    - name: Create GitHub Release with gh CLI
      if: inputs.create-release == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Set parameters based on release type
        if [ "${{ inputs.prerelease }}" = "true" ]; then
          RELEASE_TYPE="Test Release"
          DESCRIPTION="This is an automated test release for validation purposes."
          INSTALL_SECTION="### Test PyPI Installation:"
          INSTALL_CMD="pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ inputs.package-name }}==${{ inputs.version }}"
          CHANGES_SECTION=""
          FOOTER_NOTE="> **Note**: This is a test release. For production releases, see the main releases."
        else
          RELEASE_TYPE="Release"
          DESCRIPTION="Production release with the latest features and improvements."
          INSTALL_SECTION="### Installation:"
          INSTALL_CMD="pip install ${{ inputs.package-name }}==${{ inputs.version }}"
          if [ -n "${{ inputs.changelog }}" ]; then
            CHANGES_SECTION="### Changes in ${{ inputs.version }}

        ${{ inputs.changelog }}

        "
          else
            CHANGES_SECTION=""
          fi
          FOOTER_NOTE=""
        fi
        
        # Generate unified release notes
        cat > release-notes.md << EOF
        ## ${RELEASE_TYPE} ${{ inputs.release-tag }}
        
        ${DESCRIPTION}
        
        ### Artifacts Included:
        - 🐍 **Python Wheel**: Ready-to-install package
        - 📦 **Source Distribution**: Complete package source  
        - 📁 **Repository Archive**: Full source code snapshot
        
        ${CHANGES_SECTION}${INSTALL_SECTION}
        \`\`\`bash
        ${INSTALL_CMD}
        \`\`\`
        
        ### CLI Usage:
        \`\`\`bash
        aif-workflow-helper --help
        \`\`\`
        
        ${{ inputs.release-notes }}
        
        ${FOOTER_NOTE}
        EOF
        
        # Prepare gh release command flags
        PRERELEASE_FLAG=""
        if [ "${{ inputs.prerelease }}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi
        
        # Create the release with all artifacts
        gh release create "${{ inputs.release-tag }}" \
          release-artifacts/*.whl \
          release-artifacts/*.tar.gz \
          release-artifacts/*.zip \
          --title "${{ inputs.release-title }}" \
          --notes-file release-notes.md \
          $PRERELEASE_FLAG || {
            echo "Failed to create GitHub release for tag ${{ inputs.release-tag }}"
            echo "Available artifacts:"
            ls -la release-artifacts/
            exit 1
          }

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        rm -rf test_env/ release-artifacts/ || true
        rm -f *.zip release-notes.md || true