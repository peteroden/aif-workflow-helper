name: Test Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    uses: ./.github/workflows/test.yml
    with:
      fetch-depth: 0
      coverage: false

  test-release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - name: Install uv and supporting tools
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        uv pip install --system toml

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Create test version (no commit)
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "Current version: $CURRENT_VERSION"
        
        # Create a test version with timestamp to avoid conflicts
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        TEST_VERSION="${CURRENT_VERSION}+test.${TIMESTAMP}"
        echo "Test version: $TEST_VERSION"
        
        # Update version in pyproject.toml for testing (without committing)
        python -c "import toml; data=toml.load('pyproject.toml'); data['project']['version']='${TEST_VERSION}'; toml.dump(data, open('pyproject.toml', 'w'))"
        echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT

    - name: Build package (uv)
      run: |
        uv build

    - name: Check package contents
      run: |
        uvx twine check dist/*
        echo "--- Package contents (sdist top) ---"
        tar -tzf dist/*.tar.gz | head -40 || true
        echo "--- Wheel contents ---"
        python -c "import zipfile,glob; w=glob.glob('dist/*.whl')[0]; z=zipfile.ZipFile(w); print('\n'.join(z.namelist()))"

    - name: Test local installation (uv)
      run: |
        uv pip install --system dist/*.whl
        echo "--- Testing CLI ---"
        aif-workflow-helper --help
        echo "--- Testing import + nested modules ---"
        python -c "import aif_workflow_helper.utils.logging as lg; import aif_workflow_helper.core.upload as up; print('Imports OK:', lg.logger.name, up.__name__)"

    - name: Publish to Test PyPI (uvx twine)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        uvx twine upload --repository testpypi dist/*

    - name: Test installation from Test PyPI (isolated)
      run: |
        sleep 25
        python -m venv test_env
        source test_env/bin/activate
        pip install --upgrade pip
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ aif-workflow-helper==${{ steps.version.outputs.version }}
        aif-workflow-helper --help | grep "AI Foundry Agent Helper CLI"
        python -c "import aif_workflow_helper.core.download as d; print('Remote install OK:', d.__name__)"

    - name: Cleanup test files
      run: |
        rm -rf dist/
        rm -rf test_env/
        git checkout pyproject.toml  # Restore original version