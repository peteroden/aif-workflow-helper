name: Test Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    uses: ./.github/workflows/test.yml
    with:
      fetch-depth: 0
      coverage: false

  test-release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv and supporting tools
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        uv pip install --system toml

    - name: Create test version (no commit)
      id: version
      run: |
        set -e
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "Current version: $CURRENT_VERSION"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        TEST_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}"
        echo "Test version: $TEST_VERSION"
        python -c "import toml; d=toml.load('pyproject.toml'); d['project']['version']='${TEST_VERSION}'; toml.dump(d, open('pyproject.toml','w'))"
        echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT

    - name: Build and publish package
      uses: ./.github/actions/build-and-publish
      with:
        version: ${{ steps.version.outputs.version }}
        repository: testpypi
        twine-username: __token__
        twine-password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        test-install: 'true'
        package-name: aif-workflow-helper

    - name: Create repository archive
      run: |
        # Create a clean archive of the repository without .git directory
        git archive --format=zip --output=aif-workflow-helper-${{ steps.version.outputs.version }}-source.zip HEAD

    - name: Prepare release artifacts
      run: |
        # Ensure dist directory exists and contains our artifacts
        ls -la dist/
        ls -la *.zip
        
        # Create a release directory with all artifacts
        mkdir -p release-artifacts
        cp dist/*.whl release-artifacts/
        cp dist/*.tar.gz release-artifacts/
        cp *.zip release-artifacts/

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "test-v${{ steps.version.outputs.version }}"
        release_name: "Test Release v${{ steps.version.outputs.version }}"
        body: |
          ## Test Release v${{ steps.version.outputs.version }}
          
          This is an automated test release for validation purposes.
          
          ### Artifacts Included:
          - 🐍 **Python Wheel**: Ready-to-install package
          - 📦 **Source Distribution**: Complete package source
          - 📁 **Repository Archive**: Full source code snapshot
          
          ### Test PyPI Installation:
          ```bash
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ aif-workflow-helper==${{ steps.version.outputs.version }}
          ```
          
          ### CLI Usage:
          ```bash
          aif-workflow-helper --help
          ```
          
          > **Note**: This is a test release. For production releases, see the main releases.
        draft: false
        prerelease: true

    - name: Upload Python Wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/aif_workflow_helper-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_name: aif_workflow_helper-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload Source Distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/aif-workflow-helper-${{ steps.version.outputs.version }}.tar.gz
        asset_name: aif-workflow-helper-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Repository Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/aif-workflow-helper-${{ steps.version.outputs.version }}-source.zip
        asset_name: aif-workflow-helper-${{ steps.version.outputs.version }}-source.zip
        asset_content_type: application/zip

    - name: Cleanup
      if: always()
      run: |
        rm -rf dist/ test_env/ release-artifacts/
        rm -f *.zip
        git checkout pyproject.toml || true
